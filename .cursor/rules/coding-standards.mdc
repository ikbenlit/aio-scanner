---
description: 
globs: *.svelte,*.ts
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
# Coding Standards

## TypeScript
- Gebruik strikte type checking
- Vermijd `any` type
- Definieer interfaces voor alle objecten
- Gebruik type guards waar nodig
- Exporteer types en interfaces

## React
- Gebruik functionele componenten
- Implementeer React Server Components waar mogelijk
- Volg React hooks regels
- Gebruik custom hooks voor herbruikbare logica
- Implementeer error boundaries

## Styling
- Gebruik Tailwind CSS voor styling
- Volg BEM naming voor custom classes
- Gebruik CSS modules voor complexe styling
- Implementeer responsive design
- Volg design system kleuren en spacing

## State Management
- Gebruik TanStack Query voor server state
- Gebruik React Context voor globale UI state
- Implementeer optimistische updates
- Gebruik SWR voor real-time updates
- Vermijd prop drilling

## API & Data
- Gebruik tRPC voor type-safe API calls
- Implementeer error handling
- Gebruik zod voor validatie
- Cache responses waar mogelijk
- Implementeer rate limiting

## Testing
- Schrijf unit tests voor utilities
- Schrijf integration tests voor API calls
- Schrijf E2E tests voor kritieke flows
- Bereik 80% code coverage
- Gebruik Jest en React Testing Library

## Performance
- Implementeer code splitting
- Optimaliseer bundle size
- Gebruik image optimalisatie
- Implementeer caching strategieÃ«n
- Monitor Core Web Vitals

## Code Organization Principles

### DRY (Don't Repeat Yourself)
- Hergebruik code via shared utilities
- Maak herbruikbare componenten
- Centraliseer business logic
- Gebruik custom hooks voor gedeelde functionaliteit
- Implementeer shared types en interfaces
- Vermijd duplicatie van validatie logica
- Gebruik constants voor herhaalde waarden

### SOC (Separation of Concerns)
- Scheid UI van business logic
- Houd componenten klein en gefocust
- Gebruik feature-based mappenstructuur
- Scheid data fetching van rendering
- Implementeer clean architecture principes
- Houd services en utilities gescheiden
- Gebruik dependency injection waar mogelijk

### Code Modulariteit
- Schrijf kleine, testbare functies
- Gebruik composition over inheritance
- Implementeer interface segregation
- Houd modules losjes gekoppeld
- Gebruik dependency inversion
- Maak gebruik van dependency injection
- Implementeer SOLID principes

When running command prompts use Windows PowerShell syntax 

